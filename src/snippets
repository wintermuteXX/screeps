Code Snippetss

/* 

Game.spawns.Southtown.spawnCreep([WORK, CARRY, MOVE, CARRY, MOVE], 'Builder_666', {memory: {role: 'builder'}});
Game.market.createOrder(ORDER_BUY, RESOURCE_ENERGY, 0.01, 30000, "E68S47");
Game.market.deal('59d1e4719b0a8a64bbfdd5dc', 30000, "E68S47");

grunt screeps --server=season

Log.warn(`The creep spawns?: ${creep.room.spawns[0].spawning} `, "Spawning")
Log.LEVEL_DEBUG = 0; Log.LEVEL_INFO = 1; Log.LEVEL_WARN = 2; Log.LEVEL_ERROR = 3; Log.LEVEL_SUCCESS = 4;

todo-tree.tags
**  TODO,FIXME,TEST,BUG,REMOVE,LONGTERM

Game.profiler.profile(ticks, [functionFilter]);
Game.profiler.email(ticks, [functionFilter]);
*/


global.RECIPES = {};
for (const a in REACTIONS) {
    for (const b in REACTIONS[a]) {
        RECIPES[REACTIONS[a][b]] = [a, b];
    }
} 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
for (var key in REACTIONS) {
    if (REACTIONS.hasOwnProperty(key)) {
        var obj = REACTIONS[key];
        for (var prop in obj) {
            if (obj.hasOwnProperty(prop)) {
                console.log(key + " " + prop + " " + obj[prop]);
                if () {break 2}
            }
        }
    }
}
// [17:43:29][shard3]H O OH //
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
function sorter(structure) {
    switch (structure.structureType) {
        case STRUCTURE_SPAWN:
            return 1;
        case STRUCTURE_EXTENSION:
            return 2;
        case STRUCTURE_TOWER:
            return 3;
        default:
            return 4;
    }
}
let sortedThings = _.sortBy(unsortedThings, sorter);
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
for (var i in RESOURCES_ALL) {
    Game.market.createOrder({
        type: ORDER_BUY,
        resourceType: RESOURCES_ALL[i],
        price: 0.003,
        totalAmount: 50000,
        roomName: "E29S22"
    });
}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
/*
 * Get type of room from name
 *
 * @author engineeryo
 * @co-author warinternal
 */
Room.describe = function (name) {
        const [EW, NS] = name.match(/\d+/g)
        if (EW % 10 == 0 || NS % 10 == 0) {
            return 'HIGHWAY'
        } else if (EW % 5 == 0 && NS % 5 == 0) {
            return 'CENTER'
        } else if (Math.abs(5 - EW % 10) <= 1 && Math.abs(5 - NS % 10) <= 1) {
            return 'SOURCE_KEEPER'
        } else {
            return 'ROOM'
        }
    }
    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --[
        StructureSpawn,
        StructureStorage,
        StructureExtension,
        StructureLink,
        StructureLab,
        StructureNuker,
        StructurePowerSpawn,
        StructureTerminal,
        StructureTower,
        StructureContainer
    ].forEach(function (type) {
        define(type, "Energy", (self) => [STRUCTURE_STORAGE, STRUCTURE_CONTAINER, STRUCTURE_TERMINAL].includes(self.structureType) ?
            ({
                current: self.store[RESOURCE_ENERGY],
                max: self.storeCapacity - _.sum(self.store) + self.store[RESOURCE_ENERGY]
            }) :
            ({
                current: self.energy,
                max: self.energyCapacity
            }));
        define(type, "EnergyPercent", (self) => Math.round((self.Energy.current / self.Energy.max) * 100));
        define(type, "Health", (self) => ({
            current: self.hits,
            max: self.hitsMax
        }));
        define(type, "HealthPercent", (self) => Math.round((self.Health.current / self.Health.max) * 100));
    });
define(Structure, "mem", (self) => Memory.idData[self.id] === undefined ? Memory.idData[self.id] = {} : Memory.idData[self.id]);
define(Creep, "Health", (self) => ({
    current: self.hits,
    max: self.hitsMax
}));
define(Creep, "HealthPercent", (self) => Math.round((self.Health.current / self.Health.max) * 100));
define(Creep, "Energy", (self) => ({
    current: self.carry[RESOURCE_ENERGY],
    max: self.carryCapacity - _.sum(self.carry) + self.carry[RESOURCE_ENERGY]
}));
define(Creep, "EnergyPercent", (self) => Math.round((self.Energy.current / self.Energy.max) * 100));

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

var creepRoles = _.groupBy(Game.creeps, (c) => creep.room.name + "_" + creep.memory.role);

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
module.exports.loop = function () {
    var dt = distanceTransform(walkablePixelsForRoom('sim'));
    displayCostMatrix(dt);
}



/*     @param {PathFinder.CostMatrix} foregroundPixels - object pixels. modified for output
    @param {number} oob - value used for pixels outside image bounds
    @return {PathFinder.CostMatrix}

    the oob parameter is used so that if an object pixel is at the image boundary
    you can avoid having that reduce the pixel's value in the final output. Set
    it to a high value (e.g., 255) for this. Set oob to 0 to treat out of bounds
    as background pixels. */

function distanceTransform(foregroundPixels, oob = 255) {
    var dist = foregroundPixels; // not a copy. We're modifying the input

    // Variables to represent the 3x3 neighborhood of a pixel.
    var A, B, C;
    var D, E, F;
    var G, H, I;

    var x, y, value;
    for (y = 0; y < 50; ++y) {
        for (x = 0; x < 50; ++x) {
            if (foregroundPixels.get(x, y) !== 0) {
                A = dist.get(x - 1, y - 1);
                B = dist.get(x, y - 1);
                C = dist.get(x + 1, y - 1);
                D = dist.get(x - 1, y);
                if (y == 0) {
                    A = oob;
                    B = oob;
                    C = oob;
                }
                if (x == 0) {
                    A = oob;
                    D = oob;
                }
                if (x == 49) {
                    C = oob;
                }

                dist.set(x, y, Math.min(A, B, C, D, 254) + 1);
            }
        }
    }

    for (y = 49; y >= 0; --y) {
        for (x = 49; x >= 0; --x) {
            ;
            E = dist.get(x, y);
            F = dist.get(x + 1, y);
            G = dist.get(x - 1, y + 1);
            H = dist.get(x, y + 1);
            I = dist.get(x + 1, y + 1);
            if (y == 49) {
                G = oob;
                H = oob;
                I = oob;
            }
            if (x == 49) {
                F = oob;
                I = oob;
            }
            if (x == 0) {
                G = oob;
            }

            value = Math.min(E, F + 1, G + 1, H + 1, I + 1);
            dist.set(x, y, value);
        }
    }

    return dist;
}

/**
    @param {string} roomName
    @return {PathFinder.CostMatrix}
*/
function walkablePixelsForRoom(roomName) {
    var costMatrix = new PathFinder.CostMatrix();
    var terrain = Game.map.getRoomTerrain(roomName).getRawBuffer();

    for (var y = 0; y < 50; ++y) {
        for (var x = 0; x < 50; ++x) {
            if (!(terrain[y * 50 + x] & TERRAIN_MASK_WALL)) { // CostMatrix and terrain
                costMatrix._bits[x * 50 + y] = 1; // use different storage
            } // techniques lolwut?
        }
    }

    return costMatrix;
}

function wallOrAdjacentToExit(x, y, roomName) {
    if (1 < x && x < 48 && 1 < y && y < 48) return Game.map.getTerrainAt(x, y, roomName) == 'wall';
    if (0 == x || 0 == y || 49 == x || 49 == y) return true;

    if (Game.map.getTerrainAt(x, y, roomName) == 'wall') return true;

    var A, B, C;
    if (x == 1) {
        A = Game.map.getTerrainAt(0, y - 1, roomName);
        B = Game.map.getTerrainAt(0, y, roomName);
        C = Game.map.getTerrainAt(0, y + 1, roomName);
    }
    if (x == 48) {
        A = Game.map.getTerrainAt(49, y - 1, roomName);
        B = Game.map.getTerrainAt(49, y, roomName);
        C = Game.map.getTerrainAt(49, y + 1, roomName);
    }
    if (y == 1) {
        A = Game.map.getTerrainAt(x - 1, 0, roomName);
        B = Game.map.getTerrainAt(x, 0, roomName);
        C = Game.map.getTerrainAt(x + 1, 0, roomName);
    }
    if (y == 48) {
        A = Game.map.getTerrainAt(x - 1, 49, roomName);
        B = Game.map.getTerrainAt(x, 49, roomName);
        C = Game.map.getTerrainAt(x + 1, 49, roomName);
    }
    return !(A == 'wall' && B == 'wall' && C == 'wall');
}

/**
    positions on which you can build blocking structures, such as walls.
    @param {string} roomName
    @return {PathFinder.CostMatrix}
*/
function blockablePixelsForRoom(roomName) {
    var costMatrix = new PathFinder.CostMatrix();
    for (var y = 0; y < 50; ++y) {
        for (var x = 0; x < 50; ++x) {
            if (!wallOrAdjacentToExit(x, y, roomName)) {
                costMatrix.set(x, y, 1);
            }
        }
    }
    return costMatrix;
}

function displayCostMatrix(costMatrix, color = '#ff0000') {
    var vis = new RoomVisual();

    var max = 1;
    for (var y = 0; y < 50; ++y) {
        for (var x = 0; x < 50; ++x) {
            max = Math.max(max, costMatrix.get(x, y));
        }
    }

    for (var y = 0; y < 50; ++y) {
        for (var x = 0; x < 50; ++x) {
            var value = costMatrix.get(x, y);
            if (value > 0) {
                vis.circle(x, y, {
                    radius: costMatrix.get(x, y) / max / 2,
                    fill: color
                });
            }
        }
    }
}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -
global.BUCKET_MAX = 10000;
global.clamp = function clamp(min, val, max) {
    if (val < min) return min;
    if (val > max) return max;
    return val;
}

/**
 * Adjust your CPU limit per tick based on current and target bucket levels. It will never dip
 *   below a fifth of your bucket, to help out 10 CPU users.
 * 
 * This uses sine functions to adjust a limit multiplier from 0 at 0 bucket, to 1 at the target
 *   bucket, to 2 at full bucket. If you are a 10 CPU user, after the multiplier hits 1.5, it will
 *   add 1 to the multiplier, so you can burn through more of the available bucket. This is to assist
 *   in taking full advantage of the free 1k bucket during reset storms.
 *
 * https://imgur.com/a/9PN5z shows the curve of the multiplier where the target bucket is 8k (default)
 * 
 * @author semperrabbit 20180302
 * 
 * @param int limit         - Your current static limit (Game.cpu.limit)
 * @param int bucket        - Your current bucket (Game.cpu.bucket)
 * @param int target        - The bucket level you want your AI to stablize at
 *                            (Optional: defaults to 8000)
 * @param int maxCpuPerTick - What you want to recognize as the max limit for your code to use
 *                            (Optional: defaults to 495)
 */
global.adjustedCPULimit = function adjustedCPULimit(limit, bucket, target = BUCKET_MAX * 0.8, maxCpuPerTick = 495) {
        var multiplier = 1;
        if (bucket < target) {
            multiplier = Math.sin(Math.PI * bucket / (2 * target));
        }
        if (bucket > target) {
            // Thanks @Deign for support with the sine function below
            multiplier = 2 + Math.sin((Math.PI * (bucket - BUCKET_MAX)) / (2 * (BUCKET_MAX - target)));
            // take care of our 10 CPU folks, to dip into their bucket reserves more...
            // help them burn through excess bucket above the target.
            if (limit === 10 && multiplier > 1.5)
                multiplier += 1;
        }

        return clamp(Math.round(limit * 0.2), Math.round(limit * multiplier), maxCpuPerTick);
    }
    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -
    /**

    Module: prototype.Room.structures v1.6
    Author: SemperRabbit
    Date:   20180309-13,0411
    Usage:  require('prototype.Room.structures');


    This module will provide structure caching and extends the Room
      class' prototype to provide `room.controller`-like properties
      for all structure types. It will cache the object IDs of a
      room.find() grouped by type as IDs in global. Once the property
      is requested, it will chech the cache (and refresh if required),
      then return the appropriate objects by maping the cache's IDs
      into game objects for that tick.

    Changelog:

    1.0: Initial publish
    1.1: Changed multipleList empty results from `null` to `[]`
         Bugfix: changed singleList returns from arrays to single objects or undefined
    1.2: Added intra-tick caching in addition to inter-tick caching
    1.3: Multiple bugfixes
    1.4: Moved STRUCTURE_POWER_BANK to `multipleList` due to proof of *possibility* of multiple
            in same room.
    1.5: Added CPU Profiling information for Room.prototype._checkRoomCache() starting on line 47
    1.6: Added tick check for per-tick caching, in preperation for the potential "persistent Game
            object" update. Edits on lines 73, 77-83, 95, 99-105
    */

    var roomStructures = {};
var roomStructuresExpiration = {};

const CACHE_TIMEOUT = 50;
const CACHE_OFFSET = 4;

const multipleList = [
    STRUCTURE_SPAWN, STRUCTURE_EXTENSION, STRUCTURE_ROAD, STRUCTURE_WALL,
    STRUCTURE_RAMPART, STRUCTURE_KEEPER_LAIR, STRUCTURE_PORTAL, STRUCTURE_LINK,
    STRUCTURE_TOWER, STRUCTURE_LAB, STRUCTURE_CONTAINER, STRUCTURE_POWER_BANK,
];

const singleList = [
    STRUCTURE_OBSERVER, STRUCTURE_POWER_SPAWN, STRUCTURE_EXTRACTOR, STRUCTURE_NUKER,
    //STRUCTURE_TERMINAL,   STRUCTURE_CONTROLLER,   STRUCTURE_STORAGE,
];

function getCacheExpiration() {
    return CACHE_TIMEOUT + Math.round((Math.random() * CACHE_OFFSET * 2) - CACHE_OFFSET);
}

/********* CPU Profiling stats for Room.prototype._checkRoomCache ********** 

calls         time      avg        function
550106        5581.762  0.01015    Room._checkRoomCache
​
calls with cache reset: 4085
avg for cache reset:    0.137165
calls without reset:    270968
avg without reset:      0.003262

****************************************************************************/

Room.prototype._checkRoomCache = function _checkRoomCache() {

    --  if cache is expired or does not exist
    if (!roomStructuresExpiration[this.name] || !roomStructures[this.name] || roomStructuresExpiration[this.name] < Game.time) {
        roomStructuresExpiration[this.name] = Game.time + getCacheExpiration();
        roomStructures[this.name] = _.groupBy(this.find(FIND_STRUCTURES), s => s.structureType);
        var i;
        for (i in roomStructures[this.name]) {
            roomStructures[this.name][i] = _.map(roomStructures[this.name][i], s => s.id);
        }
    }
}

multipleList.forEach(function (type) {
    Object.defineProperty(Room.prototype, type + 's', {
        get: function () {
            if (this['_' + type + 's'] && this['_' + type + 's_ts'] === Game.time) {
                return this['_' + type + 's'];
            } else {
                this._checkRoomCache();
                if (roomStructures[this.name][type]) {
                    this['_' + type + 's_ts'] = Game.time;
                    return this['_' + type + 's'] = roomStructures[this.name][type].map(Game.getObjectById);
                } else {
                    this['_' + type + 's_ts'] = Game.time;
                    return this['_' + type + 's'] = [];
                }
            }
        },
        set: function () {},
        enumerable: false,
        configurable: true,
    });
});

​

singleList.forEach(function (type) {
    Object.defineProperty(Room.prototype, type, {
        get: function () {
            if (this['_' + type] && this['_' + type + '_ts'] === Game.time) {
                return this['_' + type];
            } else {
                this._checkRoomCache();
                if (roomStructures[this.name][type]) {
                    this['_' + type + '_ts'] = Game.time;
                    return this['_' + type] = Game.getObjectById(roomStructures[this.name][type][0]);
                } else {
                    this['_' + type + '_ts'] = Game.time;
                    return this['_' + type] = undefined;
                }
            }
        },
        set: function () {},
        enumerable: false,
        configurable: true,
    });
});
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -
//ScreepsLiquidator
let prices = {
    XUH2O: 0.449,
    XKH2O: 1,
    XKHO2: 0.6,
    XLH2O: 0.856,
    XLHO2: 0.349,
    XZH2O: 0.3,
    XZHO2: 0.48,
    XGH2O: 2.077,
    XGHO2: 0.63,
};
//  energy : 0.012,
//  power : 0.393,
let orderAmount = 1000;
let priceReduction = 0.15;
for (let orderId in Game.market.orders) {
    if (Game.market.orders[orderId].remainingAmount == 0) {
        console.log('Cleaned up order ' + orderId);
        Game.market.cancelOrder(orderId);
    }
}
if (Object.keys(Game.market.orders).length >= 50) {
    if (Game.time % 20 === 0) {
        console.log('At max orders!')
    };
    return;
}
for (let roomName in Game.rooms) {
    let room = Game.rooms[roomName];
    if (room.terminal && room.controller && room.controller.my && room.controller.level >= 6) {
        let terminal = room.terminal;
        for (let type in terminal.store) {
            if (prices[type] === null) {
                console.log('No price for this');
            } else {
                let terminalAmount = terminal.store[type];
                let sellPrice = prices[type] * (1 - priceReduction);
                let matchingOrder = _.find(Game.market.orders, (order) => order.roomName == roomName && order.resourceType == type)
                if (matchingOrder) {
                    console.log('Already matching order ' + type + ' ' + JSON.stringify(matchingOrder));
                } else {
                    let res = Game.market.createOrder(ORDER_SELL, type, sellPrice, _.min([terminalAmount, orderAmount]), room.name);
                    console.log('Making sell order for ' + type + ' in ' + room.name + ' with res ' + res + ' at quantity ' + _.min([terminalAmount, orderAmount]));
                    if (res === ERR_FULL) {
                        console.log('At max orders!');
                        return;
                    }
                }
            }
        }
    }
}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --
creep.withdraw(creep.room.storage, _.findKey(creep.room.storage.store));
-- -- -- -- -- -- -- -- -- -- -- -- -- -
placeContainer(); {
    if (this.room.controller.reservation &&
        /* reserved and not mine */
        this.room.controller.reservation.username != Game.structures[_.first(Object.keys(Game.structures))].owner.username) {
        // console.log(`MINER: Unable to place container in ${this.operation.name}, hostile reserved room`);
        return;
    }
    var startingPosition = this.findMinerStorage();
    if (!startingPosition) {
        startingPosition = this.room.find(FIND_MY_SPAWNS)[0];
    }
    if (!startingPosition) {
        startingPosition = this.room.find(FIND_CONSTRUCTION_SITES, {
            filter: (function (s) {
                return s.structureType === STRUCTURE_SPAWN;
            })
        })[0];
    }
    if (!startingPosition)
        return;
    if (this.source.pos.findInRange(FIND_CONSTRUCTION_SITES, 1).length > 0)
        return;
    var ret = PathFinder.search(this.source.pos, [{
        pos: startingPosition.pos,
        range: 1
    }], {
        maxOps: 4000,
        swampCost: 2,
        plainCost: 2,
        roomCallback: function (roomName) {
            var room = Game.rooms[roomName];
            if (!room)
                return;
            var matrix = empire.traveler.getStructureMatrix(room);
            return matrix;
        }
    });
    if (ret.incomplete || ret.path.length === 0) {
        notifier.log("path used for container placement in " + this.operation.name + " incomplete, please investigate");
    }
    var position_1 = ret.path[0];
    var testPositions = _.sortBy(this.source.pos.openAdjacentSpots(true), function (p) {
        return p.getRangeTo(position_1);
    });
    for (var _i = 0, testPositions_1 = testPositions; _i < testPositions_1.length; _i++) {
        var testPosition = testPositions_1[_i];
        var sourcesInRange = testPosition.findInRange(FIND_SOURCES, 1);
        if (sourcesInRange.length > 1) {
            continue;
        }
        console.log("MINER: placed container in " + this.operation.name);
        testPosition.createConstructionSite(STRUCTURE_CONTAINER);
        return;
    }
    console.log("MINER: Unable to place container in " + this.operation.name);
}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -
// This is called during global reset to set up structure memory,
// because it does not need to be called often.
if (!Memory.structures) {
    console.log('[Memory] Initializing structure memory');
    Memory.structures = {};
}

// Adds structure memory to OwnedStructure things.
// Easier to reason about garbage collection in this implementation. 
Object.defineProperty(OwnedStructure.prototype, "memory", {
    get: function () {
        if (!Memory.structures[this.id])
            Memory.structures[this.id] = {};
        return Memory.structures[this.id];
    },
    set: function (v) {
        return _.set(Memory, 'structures.' + this.id, v);
    },
    configurable: true,
    enumerable: false
});

// Call this periodically to garbage collect structure memory
// (I find once every 10k ticks is fine)
global.GCStructureMemory = function () {
        for (var id in Memory.structures)
            if (!Game.structures[id]) {
                console.log("Garbage collecting structure " + id + ', ' + JSON.stringify(Memory.structures[id]));
                delete Memory.structures[id];
            }
    }
    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
Stick on global with `global.Log = require('Log');`
and enjoy
    /**
     * Log.js
     *
     * ES6 log class for logging screeps messages with color, where it makes sense.
     * @todo: abbr tag '<abbr title="World Health Organization">WHO</abbr>'
     * @todo: log groups / log levels?
     */
    "use strict";

class Log {
    constructor() {
        throw new Error("Log is a static class");
    }

    static debug(msg, tag) {
        this.log(Log.LEVEL_DEBUG, msg, tag);
    }

    static info(msg, tag) {
        this.log(Log.LEVEL_INFO, msg, tag);
    }

    static warn(msg, tag) {
        this.log(Log.LEVEL_WARN, msg, tag);
    }

    static error(msg, tag) {
        this.log(Log.LEVEL_ERROR, msg, tag);
    }

    static success(msg, tag) {
        this.log(Log.LEVEL_SUCCESS, msg, tag);
    }

    /** */
    static log(level = Log.LEVEL_DEBUG, msg, tag) {
        var color = Log.color[level];
        if (tag && this.getLogLevel(tag) > level)
            return;
        this.toConsole(msg, color, tag);
    }

    /**
     * HTML table in console
     * ex: Log.table(['a','b'], [[1,2],[3,4]])
     */
    static table(headers, rows) {

        let msg = '<table>';
        _.each(headers, h => msg += '<th width="50px">' + h + '</th>');
        _.each(rows, row => msg += '<tr>' + _.map(row, el => (`<th>${el}</th>`)) + '</tr>');
        msg += '</table>';
        // console.log(msg);
        return msg;
    }

    /** */
    static notify(msg, group = 0, color = 'red') {
        this.toConsole(msg, color);
        Game.notify(msg, group);
        /** */
    }

    if (!Memory.logging)
        static getLogLevel(tag) {
            Memory.logging = {};
            if (Memory.logging[tag] == null)
                return Log.LEVEL_WARN;
            return Memory.logging[tag];
        }

    /** */
    static toConsole(msg, color, tag) {
        if (tag)
            console.log(`<font color=${color}>[${tag}] ${msg}</font>`);
        else
            console.log(`<font color=${color}>${msg}</font>`);
    }

    /** */
    static progress(v, m) {
        return `<progress value="${v}" max="${m}"/>`;
    }

}

/** Log levels */
Log.LEVEL_DEBUG = 0;
Log.LEVEL_INFO = 1;
Log.LEVEL_WARN = 2;
Log.LEVEL_ERROR = 3;
Log.LEVEL_SUCCESS = 4;

/** Log colors */
Log.color = {
    [Log.LEVEL_DEBUG]: 'yellow',
    [Log.LEVEL_INFO]: 'cyan',
    [Log.LEVEL_WARN]: 'orange',
    [Log.LEVEL_ERROR]: 'red',
    [Log.LEVEL_SUCCESS]: 'green'
};

Object.freeze(Log);
Object.freeze(Log.color);

module.exports = Log;
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
if (_.sum(creep.carry)) creep.transfer(target, _.last(Object.keys(creep.carry)))
    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
global.UNIT_COST = (body) => _.sum(body, p => BODYPART_COST[p]);
global.UNIT_COST = function (body) {
    return _.sum(body, function (p) {
        return BODYPART_COST[p];
    });
};
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
class Pos {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}
Room.prototype.printRoomCosts = function (matrix, proportional = false, aroundPos = false) {
        let x = 0,
            y = 0,
            maxCost = 5,
            val, line, cost, redHex, greenHex, color;
        let start = new Pos(Math.max(aroundPos && aroundPos.x - 3, 0) || 0,
            Math.max(aroundPos && aroundPos.y - 3, 0) || 0);
        let end = new Pos(Math.min(aroundPos && aroundPos.x + 3, 49) || 49,
            Math.min(aroundPos && aroundPos.y + 3, 49) || 49);
        console.log("costs:");

        if (proportional) {
            let xP, yP
            for (xP = start.x; xP <= end.x; xP++) {
                for (yP = start.y; yP <= end.y; yP++) {
                    cost = matrix.get(xP, yP);
                    if (cost < 250 && cost > maxCost) {
                        maxCost = cost;
                    }
                }
            }
            console.log(maxCost);
        }

        for (y = start.y; y <= end.y; y++) {
            line = '';
            for (x = start.x; x <= end.x; x++) {
                val = Math.min(matrix.get(x, y) + 1, maxCost) * Math.floor(256 / maxCost);
                redHex = (val).toString(16);
                greenHex = (256 - val).toString(16);
                color = (redHex[1] ? redHex : '0' + (redHex[0] || '0')) +
                    (greenHex[1] ? greenHex : '0' + (greenHex[0] || '0')) +
                    '00';
                line += '<a style="color: #' + color + '">███</a>';
            }
            console.log(line);
        }
    }
    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -
    global.spiralOut = function (n) {
        let m = n + 1;
        let result = [];
        for (let i = 0; i <= 49; i++) {
            if (i % 2 === 0 || m > 49) {
                result[i] = n;
                n--;
                continue;
            }
            result[i] = m;
            m++;
        }
        return result;
    },